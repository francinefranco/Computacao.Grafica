from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
import sys

# Coordenadas do ponto inicial e final da linha
line_start_pos = [0.0, 0.0]
line_end_pos = [0.0, 0.0]

# Variável para alternar entre o início e o fim da linha
status_click = 0

# Cores
dot_color = [0.0, 0.0, 1.0]  # Azul
dot_color_pallet = [
    (0.0, 0.0, 1.0),  # Azul
    (0.0, 1.0, 0.0),  # Verde
    (1.0, 0.5, 0.0),  # Laranja
    (1.0, 0.0, 1.0),  # Magenta
    (0.0, 0.5, 0.0),  # Verde escuro
    (0.0, 1.0, 1.0),  # Ciano
    (0.5, 0.5, 0.5),  # Cinza
    (1.0, 1.0, 0.0),  # Amarelo
    (1.0, 0.0, 0.0),  # Vermelho
    (0.5, 0.0, 0.5)   # Roxo
]

def coordenates_converter():
    global line_start_pos, line_end_pos
    normalized_x = -1.0 + 2.0 * (x_mouse_pos / 400.0)
    normalized_y = -(-1.0 + 2.0 * (y_mouse_pos / 400.0))
    print(f"Mouse Position: {x_mouse_pos}, {y_mouse_pos}")
    print(f"Coordinate Position: {normalized_x}, {normalized_y}")
    print(f"Status Click: {status_click}")
    if status_click == 0:
        line_start_pos[0] = normalized_x
        line_start_pos[1] = normalized_y
    else:
        line_end_pos[0] = normalized_x
        line_end_pos[1] = normalized_y

def picked_color(key_stroke):
    global dot_color
    dot_color = dot_color_pallet[key_stroke]

def keyboard(key, x, y):
    number = ord(key) - ord('0')
    if 0 <= number <= 9:
        picked_color(number)
    else:
        print("Tecla inválida!")
    glutPostRedisplay()  # Redesenha a tela após a troca de cor


def draw_line():
    glColor3f(dot_color[0], dot_color[1], dot_color[2])
    glPointSize(5.0)

    glBegin(GL_LINES)
    glVertex2f(line_start_pos[0], line_start_pos[1])
    glVertex2f(line_end_pos[0], line_end_pos[1])
    glEnd()
    glFlush()

def draw():
    glClearColor(0, 0, 0, 0)
    if status_click == 0:
        glClear(GL_COLOR_BUFFER_BIT)
        draw_line()
    glFlush()

def mouse(button, state, x, y):
    global x_mouse_pos, y_mouse_pos, status_click
    if button == GLUT_LEFT_BUTTON:
        if state == GLUT_DOWN:
            print(f"x = {x}, y = {y}")
            x_mouse_pos = x
            y_mouse_pos = y
            if status_click == 0:
                line_start_pos[0] = x
                line_start_pos[1] = y
                coordenates_converter()
                print(f"after line_pos_start: {line_start_pos[0]}, {line_start_pos[1]}")
            else:
                line_end_pos[0] = x
                line_end_pos[1] = y
                coordenates_converter()
                print(f"after line_pos_end: {line_end_pos[0]}, {line_end_pos[1]}")

            status_click = 1 - status_click

def main():
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)
    glutInitWindowPosition(50, 100)
    glutInitWindowSize(400, 400)
    glutCreateWindow(b"Exercicio 1 - OpenGL")
    glutDisplayFunc(draw)
    glutMouseFunc(mouse)
    glutKeyboardFunc(keyboard)
    glutMainLoop()

if __name__ == "__main__":
    main()

    glVertex2f(line_start_pos[0], line_start_pos[1])
    glVertex2f(line_end_pos[0], line_end_pos[1])
    glEnd()
    glFlush()

def draw():
    glClearColor(0, 0, 0, 0)
    glColor3f(*colors[current_color_index])  # cor atual
    if status_click == 0:
        glClear(GL_COLOR_BUFFER_BIT)
        draw_line()
    glFlush()

# quando uma tecla é pressionada
def keyboard(key, x, y):
    global current_color_index
    if key.isdigit() and 0 <= int(key) < len(colors):
        current_color_index = int(key)
        glutPostRedisplay()  # redesenha a tela

def mouse(button, state, x, y):
    global x_mouse_pos, y_mouse_pos, status_click
    if button == GLUT_LEFT_BUTTON:
        if state == GLUT_DOWN:
            print(f"x = {x}, y = {y}")
            x_mouse_pos = x
            y_mouse_pos = y
            if status_click == 0:
                line_start_pos[0] = x
                line_start_pos[1] = y
                coordenates_converter()
                print(f"after line_pos_start: {line_start_pos[0]}, {line_start_pos[1]}")
            else:
                line_end_pos[0] = x
                line_end_pos[1] = y
                coordenates_converter()
                print(f"after line_pos_end: {line_end_pos[0]}, {line_end_pos[1]}")

            status_click = 1 - status_click

def main():
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)
    glutInitWindowPosition(50, 100)
    glutInitWindowSize(400, 400)
    glutCreateWindow(b"Exercicio 3 - OpenGL")
    glutDisplayFunc(draw)
    glutMouseFunc(mouse)
    glutKeyboardFunc(keyboard)
    glutMainLoop()

if __name__ == "__main__":
    main()
